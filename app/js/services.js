// Generated by CoffeeScript 1.7.1
(function() {
  angular.module("moo.services", ["ngResource"]).constant("ResourceHelpers", {
    queryBuilder: function(action, key) {
      if (key == null) {
        key = null;
      }
      if (key) {
        return function(param, callBack) {
          var paramObj;
          paramObj = {};
          paramObj[key] = param;
          return action(paramObj, callBack);
        };
      } else {
        return function(callBack) {
          return action(callBack);
        };
      }
    },
    fixVars: function(resource) {
      var _ref, _ref1;
      return resource.variables = (_ref = (_ref1 = resource.variables.variable) != null ? _ref1 : resource.variables.variables) != null ? _ref : [];
    }
  }).factory("CurrentUser", [
    "$q", "$resource", "ServiceUrls", function($q, $resource, ServiceUrls) {
      var userName, whoamiResource;
      userName = $q.defer();
      whoamiResource = $resource("" + ServiceUrls.cowServer + "/whoami", {}, {});
      whoamiResource.get(function(data) {
        return userName.resolve(data.id);
      });
      return userName.promise;
    }
  ]).factory("Task", [
    "$resource", "CurrentUser", "ServiceUrls", "ResourceHelpers", function($resource, CurrentUser, ServiceUrls, ResourceHelpers) {
      var qb, taskResource;
      taskResource = $resource("" + ServiceUrls.cowServer + "/tasks/:id", {}, {
        get: {
          transformResponse: function(data) {
            var task;
            task = JSON.parse(data);
            ResourceHelpers.fixVars(task);
            return task;
          }
        },
        query: {
          isArray: true,
          transformResponse: function(data) {
            var task, tasks, _i, _len;
            tasks = JSON.parse(data).task;
            for (_i = 0, _len = tasks.length; _i < _len; _i++) {
              task = tasks[_i];
              ResourceHelpers.fixVars(task);
            }
            return tasks;
          }
        }
      });
      qb = ResourceHelpers.queryBuilder;
      return {
        all: qb(taskResource.query),
        find: qb(taskResource.get, "id"),
        assigned: qb(taskResource.query, "assignee"),
        candidate: qb(taskResource.query, "candidate")
      };
    }
  ]);

}).call(this);

//# sourceMappingURL=services.map
