// Generated by CoffeeScript 1.7.1
(function() {
  angular.module("moo.directives", []).directive("mooNavMenu", [
    "$route", "Areas", function($route, Areas) {
      return {
        restrict: "E",
        templateUrl: "partials/nav-menu.html",
        link: function($scope) {
          var area;
          $scope.tabs = (function() {
            var _i, _len, _results;
            _results = [];
            for (_i = 0, _len = Areas.length; _i < _len; _i++) {
              area = Areas[_i];
              _results.push({
                title: area.name,
                url: "#" + area.defaultRoute.url,
                selected: area.name === $route.current.provide.area
              });
            }
            return _results;
          })();
          return $scope.$on("$routeChangeSuccess", function(evt, newRoute) {
            var tab, _i, _len, _ref, _results;
            _ref = $scope.tabs;
            _results = [];
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              tab = _ref[_i];
              _results.push(tab.selected = tab.title === newRoute.provide.area);
            }
            return _results;
          });
        }
      };
    }
  ]).directive("mooAjaxSpinner", [
    "$http", function($http) {
      return {
        restrict: "E",
        templateUrl: "partials/ajax-spinner.html",
        scope: {},
        link: function($scope, $element) {
          var spinner;
          $scope.isLoading = function() {
            return $http.pendingRequests.length > 0;
          };
          spinner = $element.find("#spinner");
          return $scope.$watch($scope.isLoading, function(v) {
            if (v) {
              return spinner.show();
            } else {
              return spinner.hide();
            }
          });
        }
      };
    }
  ]).directive("mooEditableVariables", [
    function() {
      return {
        restrict: "E",
        templateUrl: "partials/editable-variables.html",
        scope: {
          variables: "="
        },
        link: function($scope, element) {
          element.on("keypress", function(evt) {
            return evt.which !== 13;
          });
          $scope.addVariable = function() {
            return $scope.variables.push({
              name: "",
              value: ""
            });
          };
          return $scope.removeVariable = function(variableToRemove) {
            return $scope.variables.m$removeFirst(function(v) {
              return variableToRemove.name === v.name && variableToRemove.value === v.value;
            });
          };
        }
      };
    }
  ]).directive("mooReadOnlyVariables", [
    function() {
      return {
        restrict: "E",
        templateUrl: "partials/read-only-variables.html",
        scope: {
          variables: "="
        }
      };
    }
  ]).directive("mooWorkflowTree", [
    "Workflows", function(Workflows) {
      return {
        restrict: "E",
        templateUrl: "partials/workflow-tree.html",
        scope: {
          wflowName: "=?",
          editable: "=",
          showFields: "=?",
          treeId: "=?"
        },
        link: function($scope) {
          var givenId, treeSelector;
          givenId = $scope.treeId;
          if ($scope.treeId == null) {
            $scope.treeId = $scope.wflowName != null ? $scope.wflowName + "-tree" : "tree";
          }
          if ($scope.showFields == null) {
            $scope.showFields = true;
          }
          treeSelector = "#" + $scope.treeId;
          $scope.$watch((function() {
            return $scope.treeId;
          }), function() {
            var afterLoad, onNoExistingWorkflow, onSuccess;
            afterLoad = function(workflow) {
              $scope.$emit("workflow.tree.loaded." + givenId);
              $scope.workflow = workflow;
              return workflow.selectedActivityChanged(function() {
                return $scope.$apply();
              });
            };
            onNoExistingWorkflow = function() {
              var errorMsg;
              if ($scope.editable) {
                return afterLoad(ACT_FACTORY.createEmptyWorkflow(treeSelector, $scope.editable, $scope.wflowName));
              } else {
                errorMsg = "If workflow is not editable, then workflow must already exist, but workflow: " + $scope.wflowName + " doesn't exist.";
                alert(errorMsg);
                return console.error(errorMsg);
              }
            };
            if ($scope.wflowName != null) {
              onSuccess = function(wflowData) {
                return afterLoad(ACT_FACTORY.createWorkflow(wflowData, treeSelector, $scope.editable));
              };
              return Workflows.get($scope.wflowName, onSuccess, onNoExistingWorkflow);
            } else {
              return onNoExistingWorkflow();
            }
          });
          if (!$scope.editable) {
            return;
          }
          $scope.workflowComponents = ACT_FACTORY.draggableActivities();
          $(".trash").droppable({
            drop: function(event, ui) {
              var sourceNode;
              sourceNode = $(ui.helper).data("ftSourceNode");
              return sourceNode.remove();
            }
          });
          return $scope.save = function() {
            var onFail, onSuccess, xml;
            xml = $scope.workflow.toXml();
            console.log(xml);
            onSuccess = function() {
              return alert("Workflow saved");
            };
            onFail = function(data) {
              console.log("Error: %o", data);
              if (data.status !== 409) {
                alert("Error see console");
              }
              return $scope.$emit("moo.workflow.save.error." + data.status, {
                name: $scope.workflow.name(),
                instances: data.data,
                retry: $scope.save
              });
            };
            return Workflows.update($scope.workflow.name(), xml, onSuccess, onFail);
          };
        }
      };
    }
  ]).directive("mooWorkflowComponent", [
    function() {
      return {
        restrict: "E",
        templateUrl: "partials/workflow-component.html",
        scope: {
          component: "="
        },
        link: function($scope, element) {
          return element.find("div").draggable({
            helper: "clone",
            cursorAt: {
              top: -5,
              left: -5
            },
            connectToFancytree: true
          });
        }
      };
    }
  ]);

  angular.module("moo.filters", []).filter("escapeDot", [
    function() {
      return function(text) {
        return text.replace(".", "_");
      };
    }
  ]).filter("wflowIdToName", [
    function() {
      return function(text) {
        return text.m$leftOf(".");
      };
    }
  ]);

}).call(this);

//# sourceMappingURL=moo.map
