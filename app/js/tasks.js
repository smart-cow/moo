// Generated by CoffeeScript 1.7.1
(function() {
  angular.module("moo.tasks.controllers", ["moo.tasks.services", "moo.tasks.directives"]).controller("TaskListCtrl", [
    "$scope", "Tasks", function($scope, Tasks) {
      var userTasks;
      userTasks = Tasks.userTaskInfo;
      $scope.myTasks = userTasks.myTasks;
      return $scope.availableTasks = userTasks.availableTasks;
    }
  ]).controller("TaskDetailCtrl", [
    "$scope", "$routeParams", "Tasks", function($scope, $routeParams, Tasks) {
      return $scope.task = Tasks.find($routeParams.taskId);
    }
  ]);

  angular.module("moo.tasks.services", ["ngResource", "moo.services"]).factory("Tasks", [
    "$rootScope", "$http", "$resource", "$q", "CurrentUser", "ServiceUrls", "ResourceHelpers", "ScowPush", function($rootScope, $http, $resource, $q, CurrentUser, ServiceUrls, ResourceHelpers, ScowPush) {
      var getTaskList, subscribeToTaskPushMessages, taskResource, updateTask, updateTaskFromPush, userTasks;
      taskResource = $resource("" + ServiceUrls.cowServer + "/tasks/:id", {}, {
        get: {
          transformResponse: function(data) {
            var task;
            task = JSON.parse(data);
            ResourceHelpers.fixVars(task);
            return task;
          }
        },
        query: {
          isArray: true,
          transformResponse: function(data) {
            var task, tasks, _i, _len;
            tasks = JSON.parse(data).task;
            for (_i = 0, _len = tasks.length; _i < _len; _i++) {
              task = tasks[_i];
              ResourceHelpers.fixVars(task);
            }
            return tasks;
          }
        },
        take: {
          url: "" + ServiceUrls.cowServer + "/tasks/:id/take",
          params: {
            id: "@id",
            assignee: "@assignee"
          },
          method: "POST"
        },
        history: {
          isArray: true,
          url: "" + ServiceUrls.cowServer + "/tasks/history",
          params: {
            start: (new Date().getFullYear() - 1) + "-1-1",
            end: (new Date().getFullYear() + 1) + "-1-1"
          },
          transformResponse: function(data) {
            return JSON.parse(data).historyTask;
          }
        }
      });
      getTaskList = function(getMyTasks) {
        return ResourceHelpers.promiseParam(CurrentUser, true, function(user) {
          var params;
          params = getMyTasks ? {
            assignee: user.name
          } : {
            candidate: user.name
          };
          return taskResource.query(params);
        });
      };
      userTasks = {
        myTasks: getTaskList(true),
        availableTasks: getTaskList(false)
      };
      updateTask = function(newTaskData) {
        ResourceHelpers.fixVars(newTaskData);
        userTasks.myTasks.m$remove(function(t) {
          return t.id === newTaskData.id;
        });
        userTasks.availableTasks.m$remove(function(t) {
          return t.id === newTaskData.id;
        });
        if (newTaskData.state === "Ready") {
          userTasks.availableTasks.push(newTaskData);
        }
        if (newTaskData.state === "Reserved" && newTaskData.assignee === CurrentUser.name) {
          return userTasks.myTasks.push(newTaskData);
        }
      };
      updateTaskFromPush = function(data) {
        return $rootScope.$apply(function() {
          return updateTask(data);
        });
      };
      subscribeToTaskPushMessages = function(user) {
        var group, _i, _len, _ref, _results;
        console.log("set setup subscription for %o", user);
        ScowPush.subscribe("#.tasks.#.user." + user.name, updateTaskFromPush);
        _ref = user.groups;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          group = _ref[_i];
          _results.push(ScowPush.subscribe("#.tasks.#.group." + group, updateTaskFromPush));
        }
        return _results;
      };
      $q.all([CurrentUser.$promise, userTasks.myTasks.$promise, userTasks.availableTasks.$promise]).then(function(resolved) {
        return subscribeToTaskPushMessages(resolved[0]);
      });
      return {
        find: function(id) {
          return taskResource.get({
            id: id
          });
        },
        userTaskInfo: userTasks,
        historyTasks: function() {
          return ResourceHelpers.promiseParam(CurrentUser, true, function(user) {
            return taskResource.history({
              assignee: user.name
            });
          });
        },
        take: function(task) {
          return ResourceHelpers.promiseParam(CurrentUser, false, function(user) {
            task.assignee = user.name;
            return taskResource.take(task, function(taskData) {
              return updateTask(taskData);
            });
          });
        },
        complete: function(task) {
          var url, vars;
          url = "" + ServiceUrls.cowServer + "/tasks/" + task.id;
          vars = ResourceHelpers.encodeVars(task.variables);
          if (vars != null) {
            url += "?" + vars;
          }
          return $http["delete"](url).success(function() {
            return userTasks.myTasks.m$remove(function(e) {
              return e.id === task.id;
            });
          });
        }
      };
    }
  ]);

  angular.module("moo.tasks.directives", ["moo.tasks.services"]).directive("mooAssignedTasksTable", [
    function() {
      return {
        restrict: "E",
        templateUrl: "partials/tasks/task-table.html",
        scope: {
          tasks: "="
        },
        link: function($scope) {
          $scope.canAssignTasks = false;
          $scope.canCompleteTasks = true;
          $scope.caption = "Your Tasks";
          return $scope.idToInt = function(task) {
            return +task.id;
          };
        }
      };
    }
  ]).directive("mooAvailableTasksTable", [
    function() {
      return {
        restrict: "E",
        templateUrl: "partials/tasks/task-table.html",
        scope: {
          tasks: "="
        },
        link: function($scope) {
          $scope.canAssignTasks = true;
          $scope.canCompleteTasks = false;
          $scope.caption = "Available Tasks";
          return $scope.idToInt = function(task) {
            return +task.id;
          };
        }
      };
    }
  ]).directive("mooTaskHistory", [
    "Tasks", function(Tasks) {
      return {
        restrict: "E",
        templateUrl: "partials/tasks/task-history.html",
        scope: {},
        link: function($scope) {
          $scope.historyShown = false;
          $scope.showHistory = function() {
            $scope.historyShown = true;
            return $scope.historyTasks = Tasks.historyTasks();
          };
          return $scope.hideHistory = function() {
            $scope.historyShown = false;
            return $scope.historyTasks = [];
          };
        }
      };
    }
  ]).directive("mooTaskDetails", [
    function() {
      return {
        restrict: "E",
        templateUrl: "partials/tasks/task-detail.html",
        scope: {
          task: "=",
          canComplete: "="
        }
      };
    }
  ]).directive("mooCompleteTaskButton", [
    "Tasks", function(Tasks) {
      return {
        restrict: "A",
        scope: {
          task: "="
        },
        link: function($scope, element) {
          return element.bind("click", function() {
            return Tasks.complete($scope.task);
          });
        }
      };
    }
  ]).directive("mooTakeTaskButton", [
    "Tasks", function(Tasks) {
      return {
        restrict: "A",
        scope: {
          task: "="
        },
        link: function($scope, element) {
          return element.bind("click", function() {
            return Tasks.take($scope.task);
          });
        }
      };
    }
  ]);

}).call(this);

//# sourceMappingURL=tasks.map
