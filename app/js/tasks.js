// Generated by CoffeeScript 1.7.1
(function() {
  angular.module("moo.tasks.controllers", ["moo.tasks.services", "moo.tasks.directives"]).controller("TaskListCtrl", [
    "$scope", "Tasks", function($scope, Tasks) {
      var userTasks;
      userTasks = Tasks.userTaskInfo;
      $scope.myTasks = userTasks.myTasks;
      return $scope.availableTasks = userTasks.availableTasks;
    }
  ]).controller("TaskDetailCtrl", [
    "$scope", "$routeParams", "Tasks", function($scope, $routeParams, Tasks) {
      return $scope.task = Tasks.find($routeParams.taskId);
    }
  ]);

  angular.module("moo.tasks.services", ["ngResource", "moo.services"]).factory("Tasks", [
    "$rootScope", "$resource", "CurrentUser", "ServiceUrls", "ResourceHelpers", "ScowPush", function($rootScope, $resource, CurrentUser, ServiceUrls, ResourceHelpers, ScowPush) {
      var fixUpTask, init, taskResource, updateTask, userTasks;
      taskResource = {};
      userTasks = {};
      fixUpTask = function(task) {
        ResourceHelpers.fixVars(task);
        ResourceHelpers.fixOutcomes(task);
        if (task.outcomes.length === 1) {
          task.selectedOutcome = task.outcomes[0];
        }
        return task;
      };
      updateTask = function(newTaskData) {
        ResourceHelpers.fixVars(newTaskData);
        userTasks.myTasks.m$remove(function(t) {
          return t.id === newTaskData.id;
        });
        userTasks.availableTasks.m$remove(function(t) {
          return t.id === newTaskData.id;
        });
        if (newTaskData.state === "Ready") {
          userTasks.availableTasks.push(newTaskData);
        }
        if (newTaskData.state === "Reserved" && newTaskData.assignee === CurrentUser.name) {
          return userTasks.myTasks.push(newTaskData);
        }
      };
      init = function() {
        var initPushSubscription, initResourceLib, initializeUserTasks;
        taskResource = (initResourceLib = function() {
          var actions;
          actions = {
            get: {
              transformResponse: function(data) {
                return fixUpTask(angular.fromJson(data));
              }
            },
            query: {
              isArray: true,
              transformResponse: function(data) {
                var task, tasks;
                tasks = angular.fromJson(data).task;
                return (function() {
                  var _i, _len, _results;
                  _results = [];
                  for (_i = 0, _len = tasks.length; _i < _len; _i++) {
                    task = tasks[_i];
                    _results.push(fixUpTask(task));
                  }
                  return _results;
                })();
              }
            },
            take: {
              url: ServiceUrls.url("tasks/:id/take"),
              params: {
                id: "@id",
                assignee: "@assignee"
              },
              method: "POST"
            },
            complete: {
              url: ServiceUrls.url("tasks/:id"),
              method: "DELETE",
              params: {
                id: "@id",
                outcome: "@selectedOutcome",
                vars: "@encodedVars"
              }
            },
            history: {
              isArray: true,
              url: ServiceUrls.url("/tasks/history"),
              params: {
                start: (new Date().getFullYear() - 1) + "-1-1",
                end: (new Date().getFullYear() + 1) + "-1-1"
              },
              transformResponse: function(data) {
                return JSON.parse(data).historyTask;
              }
            }
          };
          return $resource(ServiceUrls.url("/tasks/:id"), {}, actions);
        })();
        userTasks = (initializeUserTasks = function() {
          CurrentUser.$promise.then(function(user) {
            var getTaskList;
            getTaskList = function(qsKey) {
              var queryString;
              queryString = {};
              queryString[qsKey] = user.name;
              return taskResource.query(queryString, function(tasks) {
                var t, _i, _len, _results;
                _results = [];
                for (_i = 0, _len = tasks.length; _i < _len; _i++) {
                  t = tasks[_i];
                  _results.push(updateTask(t));
                }
                return _results;
              });
            };
            getTaskList("assignee");
            return getTaskList("candidate");
          });
          return {
            myTasks: [],
            availableTasks: []
          };
        })();
        return (initPushSubscription = function() {
          return CurrentUser.$promise.then(function(user) {
            var group, updateTaskFromPush, _i, _len, _ref, _results;
            console.log("set setup subscription for %o", user);
            updateTaskFromPush = function(data) {
              return $rootScope.$apply(function() {
                return updateTask(data);
              });
            };
            ScowPush.subscribe("#.tasks.#.user." + user.name, updateTaskFromPush);
            _ref = user.groups;
            _results = [];
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              group = _ref[_i];
              _results.push(ScowPush.subscribe("#.tasks.#.group." + group, updateTaskFromPush));
            }
            return _results;
          });
        })();
      };
      init();
      return {
        find: function(id) {
          return taskResource.get({
            id: id
          });
        },
        userTaskInfo: userTasks,
        historyTasks: function() {
          return ResourceHelpers.promiseParam(CurrentUser, true, function(user) {
            return taskResource.history({
              assignee: user.name
            });
          });
        },
        take: function(task) {
          task.assignee = CurrentUser.name;
          return taskResource.take(task, updateTask);
        },
        complete: function(task) {
          return taskResource.complete({
            id: task.id,
            outcome: task.selectedOutcome,
            "var": ResourceHelpers.encodeVars(task.variables)
          }, function() {
            return userTasks.myTasks.m$remove(function(e) {
              return e.id === task.id;
            });
          });
        }
      };
    }
  ]);

  angular.module("moo.tasks.directives", ["moo.tasks.services"]).directive("mooTaskDetails", [
    function() {
      return {
        restrict: "E",
        templateUrl: "partials/tasks/task-detail.html",
        scope: {
          task: "=",
          canComplete: "="
        }
      };
    }
  ]).directive("mooAssignedTasksTable", [
    function() {
      return {
        restrict: "E",
        templateUrl: "partials/tasks/task-table.html",
        scope: {
          tasks: "="
        },
        link: function($scope) {
          $scope.canAssignTasks = false;
          $scope.canCompleteTasks = true;
          $scope.caption = "Your Tasks";
          return $scope.idToInt = function(task) {
            return +task.id;
          };
        }
      };
    }
  ]).directive("mooAvailableTasksTable", [
    function() {
      return {
        restrict: "E",
        templateUrl: "partials/tasks/task-table.html",
        scope: {
          tasks: "="
        },
        link: function($scope) {
          $scope.canAssignTasks = true;
          $scope.canCompleteTasks = false;
          $scope.caption = "Available Tasks";
          return $scope.idToInt = function(task) {
            return +task.id;
          };
        }
      };
    }
  ]).directive("mooTaskHistory", [
    "Tasks", function(Tasks) {
      return {
        restrict: "E",
        templateUrl: "partials/tasks/task-history.html",
        scope: {},
        link: function($scope) {
          $scope.historyShown = false;
          $scope.showHistory = function() {
            $scope.historyShown = true;
            return $scope.historyTasks = Tasks.historyTasks();
          };
          return $scope.hideHistory = function() {
            $scope.historyShown = false;
            return $scope.historyTasks = [];
          };
        }
      };
    }
  ]).directive("mooCompleteTaskButton", [
    "Tasks", function(Tasks) {
      return {
        restrict: "A",
        scope: {
          task: "="
        },
        link: function($scope, element) {
          return element.bind("click", function() {
            return Tasks.complete($scope.task);
          });
        }
      };
    }
  ]).directive("mooTakeTaskButton", [
    "Tasks", function(Tasks) {
      return {
        restrict: "A",
        scope: {
          task: "="
        },
        link: function($scope, element) {
          return element.bind("click", function() {
            return Tasks.take($scope.task);
          });
        }
      };
    }
  ]);

}).call(this);

//# sourceMappingURL=tasks.map
