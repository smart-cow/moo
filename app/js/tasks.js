// Generated by CoffeeScript 1.7.1
(function() {
  angular.module("moo.tasks.controllers", ["moo.tasks.services"]).controller("TaskListCtrl", [
    "$scope", "Tasks", function($scope, Tasks) {
      return $scope.userTasks = Tasks.userTasks;
    }
  ]).controller("TaskDetailCtrl", [
    "$scope", "$routeParams", "Tasks", function($scope, $routeParams, Tasks) {
      $scope.task = Tasks.find($routeParams.taskId);
      return console.log($scope.task);
    }
  ]);

  angular.module("moo.tasks.services", ["ngResource"]).factory("Tasks", [
    "$http", "$resource", "CurrentUser", "ServiceUrls", "ResourceHelpers", function($http, $resource, CurrentUser, ServiceUrls, ResourceHelpers) {
      var taskResource, userTaskInfo;
      taskResource = $resource("" + ServiceUrls.cowServer + "/tasks/:id", {}, {
        get: {
          transformResponse: function(data) {
            var task;
            task = JSON.parse(data);
            ResourceHelpers.fixVars(task);
            return task;
          }
        },
        query: {
          isArray: true,
          transformResponse: function(data) {
            var task, tasks, _i, _len;
            tasks = JSON.parse(data).task;
            for (_i = 0, _len = tasks.length; _i < _len; _i++) {
              task = tasks[_i];
              ResourceHelpers.fixVars(task);
            }
            return tasks;
          }
        },
        take: {
          url: "" + ServiceUrls.cowServer + "/tasks/:id/take",
          params: {
            id: "@id",
            assignee: "@assignee"
          },
          method: "POST"
        },
        history: {
          isArray: true,
          url: "" + ServiceUrls.cowServer + "/tasks/history",
          params: {
            start: (new Date().getFullYear() - 1) + "-1-1",
            end: (new Date().getFullYear() + 1) + "-1-1"
          },
          transformResponse: function(data) {
            return JSON.parse(data).historyTask;
          }
        }
      });
      userTaskInfo = {};
      CurrentUser.then(function(userName) {
        userTaskInfo.myTasks = taskResource.query({
          assignee: userName
        });
        return userTaskInfo.availTasks = taskResource.query({
          candidate: userName
        });
      });
      return {
        userTasks: userTaskInfo,
        find: function(id) {
          return taskResource.get({
            id: id
          });
        },
        historyTasks: function() {
          var tasks;
          tasks = [];
          CurrentUser.then(function(userName) {
            return taskResource.history({
              assignee: userName
            }, function(taskData) {
              var td, _i, _len, _results;
              _results = [];
              for (_i = 0, _len = taskData.length; _i < _len; _i++) {
                td = taskData[_i];
                _results.push(tasks.push(td));
              }
              return _results;
            });
          });
          return tasks;
        },
        take: function(task) {
          return CurrentUser.then(function(userData) {
            task.assignee = userData;
            return taskResource.take(task, function(taskData) {
              var t;
              return userTaskInfo.availTasks = (function() {
                var _i, _len, _ref, _results;
                _ref = userTaskInfo.availTasks;
                _results = [];
                for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                  t = _ref[_i];
                  if (t.id !== taskData.id) {
                    _results.push(t);
                  }
                }
                return _results;
              })();
            });
          });
        },
        complete: function(task) {
          var url, vars;
          url = "" + ServiceUrls.cowServer + "/tasks/" + task.id;
          vars = ResourceHelpers.encodeVars(task.variables);
          if (vars != null) {
            url += "?" + vars;
          }
          return $http["delete"](url).success(function() {
            var t;
            return userTaskInfo.myTasks = (function() {
              var _i, _len, _ref, _results;
              _ref = userTaskInfo.myTasks;
              _results = [];
              for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                t = _ref[_i];
                if (t.id !== task.id) {
                  _results.push(t);
                }
              }
              return _results;
            })();
          });
        }
      };
    }
  ]);

  angular.module("moo.tasks.directives", []).directive("mooAssignedTasksTable", [
    function() {
      return {
        restrict: "E",
        templateUrl: "partials/tasks/task-table.html",
        scope: {
          tasks: "="
        },
        link: function($scope) {
          $scope.canAssignTasks = false;
          $scope.canCompleteTasks = true;
          return $scope.caption = "Your Tasks";
        }
      };
    }
  ]).directive("mooAvailableTasksTable", [
    function() {
      return {
        restrict: "E",
        templateUrl: "partials/tasks/task-table.html",
        scope: {
          tasks: "="
        },
        link: function($scope) {
          $scope.canAssignTasks = true;
          $scope.canCompleteTasks = false;
          return $scope.caption = "Available Tasks";
        }
      };
    }
  ]).directive("mooTaskHistory", [
    "Tasks", function(Tasks) {
      return {
        restrict: "E",
        templateUrl: "partials/tasks/task-history.html",
        scope: {},
        link: function($scope) {
          $scope.historyShown = false;
          $scope.showHistory = function() {
            $scope.historyShown = true;
            return $scope.historyTasks = Tasks.historyTasks();
          };
          return $scope.hideHistory = function() {
            $scope.historyShown = false;
            return $scope.historyTasks = [];
          };
        }
      };
    }
  ]).directive("mooTaskDetails", [
    function() {
      return {
        restrict: "E",
        templateUrl: "partials/tasks/task-detail.html",
        scope: {
          task: "=",
          canComplete: "="
        }
      };
    }
  ]).directive("mooCompleteTaskButton", [
    "Tasks", function(Tasks) {
      return {
        restrict: "A",
        scope: {
          task: "="
        },
        link: function($scope, element) {
          return element.bind("click", function() {
            return Tasks.complete($scope.task);
          });
        }
      };
    }
  ]).directive("mooTakeTaskButton", [
    "Tasks", function(Tasks) {
      return {
        restrict: "A",
        scope: {
          task: "="
        },
        link: function($scope, element) {
          return element.bind("click", function() {
            return Tasks.take($scope.task);
          });
        }
      };
    }
  ]);

}).call(this);

//# sourceMappingURL=tasks.map
