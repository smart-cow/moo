// Generated by CoffeeScript 1.7.1
(function() {
  var __slice = [].slice,
    __hasProp = {}.hasOwnProperty;

  angular.module("moo.cow.web-service", ["ngResource"]).factory("CowUrl", [
    "ServiceUrls", function(ServiceUrls) {
      return function(resourcePath) {
        if (resourcePath[0] === "/") {
          resourcePath = resourcePath.substring(1);
        }
        return ServiceUrls.cowServer + resourcePath;
      };
    }
  ]).factory("MooResource", [
    "$resource", "CowUrl", function($resource, CowUrl) {
      var actionTemplates, buildDefaultAction, combineWithDefaults, configureAction, defaultActions, defaultPropsToCopy, fixJaxbObjectArray, fixObjectResource, fixResource, knownObjectArrayKeys, setDefaults;
      fixJaxbObjectArray = function(resource) {
        var keys, value;
        if (angular.isArray(resource)) {
          return resource;
        }
        keys = Object.keys(resource);
        if (keys.length !== 1) {
          return resource;
        }
        value = resource[keys[0]];
        if (!angular.isArray(value)) {
          return resource;
        }
        return value;
      };
      knownObjectArrayKeys = ["variables", "variable", "outcome", "outcomes"];
      fixObjectResource = function(resource) {
        var key, _i, _len;
        if (resource == null) {
          return resource;
        }
        for (_i = 0, _len = knownObjectArrayKeys.length; _i < _len; _i++) {
          key = knownObjectArrayKeys[_i];
          if (resource[key] != null) {
            resource[key] = fixJaxbObjectArray(resource[key]);
          }
        }
        return resource;
      };
      fixResource = function(resource) {
        var arrayResource, r, _i, _len;
        if (resource == null) {
          return resource;
        }
        arrayResource = fixJaxbObjectArray(resource);
        if (angular.isArray(arrayResource)) {
          for (_i = 0, _len = arrayResource.length; _i < _len; _i++) {
            r = arrayResource[_i];
            fixObjectResource(r);
          }
          return arrayResource;
        } else {
          return fixObjectResource(resource);
        }
      };
      setDefaults = function(action) {
        action.responseType = "json";
        action.withCredentials = true;
        return action.transformResponse = [fixResource];
      };
      actionTemplates = {
        get: function() {
          return {
            method: "GET"
          };
        },
        query: function() {
          return {
            method: "GET",
            isArray: true
          };
        },
        save: function() {
          return {
            method: "POST"
          };
        },
        post: function() {
          return {
            method: "POST"
          };
        },
        update: function() {
          return {
            method: "PUT"
          };
        },
        "delete": function() {
          return {
            method: "DELETE"
          };
        },
        remove: function() {
          return {
            method: "DELETE"
          };
        }
      };
      buildDefaultAction = function(templateType) {
        var action, _ref;
        action = (_ref = typeof actionTemplates[templateType] === "function" ? actionTemplates[templateType]() : void 0) != null ? _ref : {};
        setDefaults(action);
        return action;
      };
      defaultActions = function() {
        var actions, templateType;
        actions = {};
        for (templateType in actionTemplates) {
          if (!__hasProp.call(actionTemplates, templateType)) continue;
          actions[templateType] = buildDefaultAction(templateType);
        }
        return actions;
      };
      defaultPropsToCopy = ["method", "isArray", "responseType", "withCredentials"];
      combineWithDefaults = function(action, defaultAction) {
        var defaultXform, prop, _i, _len, _ref;
        for (_i = 0, _len = defaultPropsToCopy.length; _i < _len; _i++) {
          prop = defaultPropsToCopy[_i];
          if (action[prop] == null) {
            action[prop] = defaultAction[prop];
          }
        }
        defaultXform = (_ref = defaultAction.transformResponse) != null ? _ref : [];
        if (action.transformResponse != null) {
          defaultXform.push(action.transformResponse);
        }
        return action.transformResponse = defaultXform;
      };
      configureAction = function(name, action) {
        var defaultAction, _ref;
        if (action.path != null) {
          action.url = CowUrl(action.path);
        }
        defaultAction = buildDefaultAction((_ref = action.template) != null ? _ref : name);
        combineWithDefaults(action, defaultAction);
        return action;
      };
      return function(path, actions, paramDefaults) {
        var action, name, ngActions;
        if (paramDefaults == null) {
          paramDefaults = {};
        }
        ngActions = defaultActions();
        if (actions != null) {
          for (name in actions) {
            if (!__hasProp.call(actions, name)) continue;
            action = actions[name];
            ngActions[name] = configureAction(name, action);
          }
        }
        return $resource(CowUrl(path), paramDefaults, ngActions);
      };
    }
  ]).constant("ResourceHelpers", {
    fixVars: function(resource) {
      var _ref, _ref1, _ref2, _ref3;
      if (!angular.isArray(resource.variables)) {
        resource.variables = (_ref = (_ref1 = (_ref2 = resource.variables) != null ? _ref2.variable : void 0) != null ? _ref1 : (_ref3 = resource.variables) != null ? _ref3.variables : void 0) != null ? _ref : [];
      }
      return resource;
    },
    fixOutcomes: function(resource) {
      var _ref, _ref1;
      if (!angular.isArray(resource.outcomes)) {
        resource.outcomes = (_ref = (_ref1 = resource.outcome) != null ? _ref1 : resource.outcomes) != null ? _ref : [];
        delete resource.outcome;
      }
      return resource;
    },
    encodeVars: function(variables) {
      var v;
      return (function() {
        var _i, _len, _results;
        _results = [];
        for (_i = 0, _len = variables.length; _i < _len; _i++) {
          v = variables[_i];
          _results.push("" + v.name + ":" + v.value);
        }
        return _results;
      })();
    },
    promiseParam: function(promise, isArray, serviceCall) {
      var promiseThen, resolvedObj, _ref;
      resolvedObj = isArray ? [] : {};
      promiseThen = (_ref = promise.then) != null ? _ref : promise.$promise.then;
      promiseThen(function(promisedData) {
        return serviceCall(promisedData).$promise.then(function(serviceData) {
          var k, v, _results;
          _results = [];
          for (k in serviceData) {
            if (!__hasProp.call(serviceData, k)) continue;
            v = serviceData[k];
            _results.push(resolvedObj[k] = v);
          }
          return _results;
        });
      });
      return resolvedObj;
    }
  }).factory("CurrentUser", [
    "MooResource", "ServiceUrls", function(MooResource) {
      var user, whoamiResource;
      whoamiResource = MooResource("whoami", {
        get: {
          transformResponse: function(userData) {
            var m;
            return {
              name: userData.id,
              groups: (function() {
                var _i, _len, _ref, _results;
                _ref = userData.membership;
                _results = [];
                for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                  m = _ref[_i];
                  _results.push(m.group);
                }
                return _results;
              })()
            };
          }
        }
      });
      user = whoamiResource.get();
      return user;
    }
  ]).factory("Tasks", [
    "$rootScope", "MooResource", "CurrentUser", "ResourceHelpers", "ScowPush", function($rootScope, MooResource, CurrentUser, ResourceHelpers, ScowPush) {
      var setOutcome, taskResource, updateTask, userTasks;
      taskResource = {};
      userTasks = {
        myTasks: [],
        availableTasks: []
      };
      setOutcome = function(task) {
        var _ref;
        if (((_ref = task.outcomes) != null ? _ref.length : void 0) === 1) {
          task.selectedOutcome = task.outcomes[0];
        }
        return task;
      };
      updateTask = function(newTaskData) {
        ResourceHelpers.fixVars(newTaskData);
        userTasks.myTasks.m$remove(function(t) {
          return t.id === newTaskData.id;
        });
        userTasks.availableTasks.m$remove(function(t) {
          return t.id === newTaskData.id;
        });
        if (newTaskData.state === "Ready") {
          userTasks.availableTasks.push(newTaskData);
        }
        if (newTaskData.state === "Reserved" && newTaskData.assignee === CurrentUser.name) {
          return userTasks.myTasks.push(newTaskData);
        }
      };
      taskResource = MooResource("/tasks/:id", {
        get: {
          transformResponse: setOutcome
        },
        query: {
          isArray: true,
          transformResponse: function(tasks) {
            var task;
            return (function() {
              var _i, _len, _results;
              _results = [];
              for (_i = 0, _len = tasks.length; _i < _len; _i++) {
                task = tasks[_i];
                _results.push(setOutcome(task));
              }
              return _results;
            })();
          }
        },
        take: {
          path: "tasks/:id/take",
          params: {
            id: "@id",
            assignee: "@assignee"
          },
          template: "post"
        },
        complete: {
          path: "tasks/:id",
          method: "DELETE",
          params: {
            id: "@id",
            outcome: "@selectedOutcome",
            vars: "@encodedVars"
          }
        },
        history: {
          isArray: true,
          path: "/tasks/history",
          params: {
            start: (new Date().getFullYear() - 1) + "-1-1",
            end: (new Date().getFullYear() + 1) + "-1-1"
          }
        }
      });
      CurrentUser.$promise.then(function(user) {
        var getTaskList;
        getTaskList = function(qsKey) {
          var queryString;
          queryString = {};
          queryString[qsKey] = user.name;
          return taskResource.query(queryString, function(tasks) {
            var t, _i, _len, _results;
            _results = [];
            for (_i = 0, _len = tasks.length; _i < _len; _i++) {
              t = tasks[_i];
              _results.push(updateTask(t));
            }
            return _results;
          });
        };
        getTaskList("assignee");
        return getTaskList("candidate");
      });
      CurrentUser.$promise.then(function(user) {
        var group, updateTaskFromPush, _i, _len, _ref, _results;
        console.log("set setup subscription for %o", user);
        updateTaskFromPush = function(data) {
          return $rootScope.$apply(function() {
            return updateTask(data);
          });
        };
        ScowPush.subscribe("#.tasks.#.user." + user.name, updateTaskFromPush);
        _ref = user.groups;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          group = _ref[_i];
          _results.push(ScowPush.subscribe("#.tasks.#.group." + group, updateTaskFromPush));
        }
        return _results;
      });
      return {
        find: function(id) {
          return taskResource.get({
            id: id
          });
        },
        userTaskInfo: userTasks,
        historyTasks: function() {
          return ResourceHelpers.promiseParam(CurrentUser, true, function(user) {
            return taskResource.history({
              assignee: user.name
            });
          });
        },
        take: function(task) {
          task.assignee = CurrentUser.name;
          return taskResource.take(task, updateTask);
        },
        complete: function(task) {
          return taskResource.complete({
            id: task.id,
            outcome: task.selectedOutcome,
            "var": ResourceHelpers.encodeVars(task.variables)
          }, function() {
            return userTasks.myTasks.m$remove(function(e) {
              return e.id === task.id;
            });
          });
        }
      };
    }
  ]).factory("Workflows", [
    "MooResource", function(MooResource) {
      var processResource;
      processResource = MooResource("processes/:id", {
        query: {
          path: "processDefinitions",
          transformResponse: function(definitions) {
            var d;
            return (function() {
              var _i, _len, _results;
              _results = [];
              for (_i = 0, _len = definitions.length; _i < _len; _i++) {
                d = definitions[_i];
                _results.push(d.key);
              }
              return _results;
            })();
          }
        },
        update: {
          method: "PUT",
          headers: {
            "Content-Type": "application/xml"
          }
        },
        instances: {
          template: "query",
          path: "processes/:id/processInstances"
        },
        deleteInstances: {
          template: "delete",
          path: "processes/:id/processInstances"
        }
      });
      return {
        get: function(id, onSuccess, onFailure) {
          return processResource.get({
            id: id
          }, onSuccess, onFailure);
        },
        query: function(onSuccess, onFailure) {
          return processResource.query(onSuccess, onFailure);
        },
        update: function(name, workflowXml, onSuccess, onFailure) {
          var workflowString;
          workflowString = new XMLSerializer().serializeToString(workflowXml);
          return processResource.update({
            id: name
          }, workflowString, onSuccess, onFailure);
        },
        instances: function(name, onSuccess, onFailure) {
          return processResource.instances({
            id: name
          }, onSuccess, onFailure);
        },
        deleteInstances: function(name, onSuccess, onFailure) {
          return processResource.deleteInstances({
            id: name
          }, onSuccess, onFailure);
        }
      };
    }
  ]).factory("RunningWorkflows", [
    "MooResource", function(MooResource) {
      var buildStartRequest, getAllStatusSummaries, statuses, workflowsResource;
      workflowsResource = MooResource("processInstances/:id", {
        statusSummary: {
          path: "processInstances/:id/status",
          template: "get",
          transformResponse: function(wflowStatus) {
            var ss, statusSummary, statuses;
            statusSummary = wflowStatus.statusSummary;
            statuses = (function() {
              var _i, _len, _results;
              _results = [];
              for (_i = 0, _len = statusSummary.length; _i < _len; _i++) {
                ss = statusSummary[_i];
                _results.push({
                  name: ss.name,
                  status: ss.status,
                  task: ss.task[0].name
                });
              }
              return _results;
            })();
            return {
              name: wflowStatus.id,
              statuses: statuses
            };
          }
        },
        fullStatus: {
          path: "processInstances/:id/status",
          template: "get"
        },
        start: {
          template: "post",
          path: "processInstances"
        }
      });
      statuses = [];
      getAllStatusSummaries = function() {
        statuses.m$clear();
        workflowsResource.all(function(workflows) {
          var idNum, wf, _i, _len, _results;
          _results = [];
          for (_i = 0, _len = workflows.length; _i < _len; _i++) {
            wf = workflows[_i];
            idNum = wf.id.m$rightOf(".");
            _results.push(statuses.push(workflowsResource.statusSummary({
              id: idNum
            })));
          }
          return _results;
        });
        return statuses;
      };
      buildStartRequest = function(workflowName, variables) {
        var reqBody, requestVariables, v;
        reqBody = {
          processDefinitionKey: workflowName
        };
        if ((variables != null ? variables.length : void 0) > 0) {
          requestVariables = (function() {
            var _i, _len, _results;
            _results = [];
            for (_i = 0, _len = variables.length; _i < _len; _i++) {
              v = variables[_i];
              _results.push({
                name: v.name,
                value: v.value
              });
            }
            return _results;
          })();
          reqBody.variables = {
            variable: requestVariables
          };
        }
        return reqBody;
      };
      return {
        query: workflowsResource.query,
        start: function() {
          var callbacks, req, variables, workflowName;
          workflowName = arguments[0], variables = arguments[1], callbacks = 3 <= arguments.length ? __slice.call(arguments, 2) : [];
          req = buildStartRequest(workflowName, variables);
          return workflowsResource.start.apply(workflowsResource, [{}, req].concat(__slice.call(callbacks)));
        },
        fullStatus: function(wflowIdNum, onSuccess, onFailure) {
          return workflowsResource.fullStatus({
            id: wflowIdNum
          }, onSuccess, onFailure);
        },
        statusSummary: function(wflowIdNum, onSuccess, onFailure) {
          return workflowsResource.statusSummary({
            id: wflowIdNum
          }, onSuccess, onFailure);
        },
        allStatusSummaries: getAllStatusSummaries,
        "delete": function(id, onSuccess, onFailure) {
          id = id.m$rightOf(".");
          return workflowsResource["delete"]({
            id: id
          }, onSuccess, onFailure);
        }
      };
    }
  ]).factory("ScowPush", [
    "ServiceUrls", function(ServiceUrls) {
      var addSubscription, init;
      addSubscription = function() {};
      init = function() {
        var amqpInfo, amqpSubscribe, isConnected, stomp, stompConnect, subscriptions;
        amqpInfo = ServiceUrls.amqp;
        stomp = Stomp.over(new SockJS(amqpInfo.url));
        stomp.debug = function() {};
        subscriptions = [];
        isConnected = false;
        addSubscription = function(subscription) {
          subscriptions.push(subscription);
          if (isConnected) {
            return amqpSubscribe(subscription);
          }
        };
        amqpSubscribe = function(subscription) {
          var destination;
          destination = amqpInfo.exchange + subscription.routingKey;
          return stomp.subscribe(destination, function(message) {
            var parsedBody, routingKey;
            routingKey = message.headers.destination.m$rightOf("/");
            parsedBody = angular.fromJson(message.body);
            return subscription.onReceive(parsedBody, routingKey);
          });
        };
        stompConnect = function() {
          var onConnect, onError;
          onConnect = function() {
            var s, _i, _len, _results;
            console.log("Stomp connected");
            isConnected = true;
            _results = [];
            for (_i = 0, _len = subscriptions.length; _i < _len; _i++) {
              s = subscriptions[_i];
              _results.push(amqpSubscribe(s));
            }
            return _results;
          };
          onError = function() {
            isConnected = false;
            return console.log("Error: disconnected from AMQP: %o", arguments);
          };
          return stomp.connect(amqpInfo.username, amqpInfo.password, onConnect, onError);
        };
        return stompConnect();
      };
      init();
      return {
        subscribe: function(routingKey, onReceive) {
          console.log(routingKey);
          return addSubscription({
            routingKey: routingKey,
            onReceive: onReceive
          });
        }
      };
    }
  ]);

}).call(this);

//# sourceMappingURL=cow-service.map
