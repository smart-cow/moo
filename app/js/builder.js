// Generated by CoffeeScript 1.7.1
(function() {
  angular.module("moo.builder.controllers", ["moo.builder.directives"]).controller("WorkflowBuilderCtrl", [
    "$scope", "$routeParams", "Workflows", function($scope, $routeParams, Workflows) {
      var retrySave, selectingSubProc, updateConflicts, _ref;
      $scope.workflowName = (_ref = $routeParams.wflowName) != null ? _ref : "NewWorkflow";
      $scope.showWorkflows = false;
      $scope.toggleShowWorkflows = function() {
        return $scope.showWorkflows = !$scope.showWorkflows;
      };
      updateConflicts = function() {
        if (!$scope.workflowName) {
          return;
        }
        return $scope.conflicts = Workflows.instances($scope.workflowName);
      };
      updateConflicts();
      selectingSubProc = false;
      $scope.$on("moo.workflow.selected", function(evt, wfName) {
        var data;
        if (selectingSubProc) {
          console.log("subproc");
          console.log($scope);
          $("#subproc-chooser-modal").modal("hide");
          $scope.$broadcast("moo.subproc.selected", wfName);
          return;
        }
        if ($scope.showWorkflows) {
          $scope.workflowName = wfName + "-copy";
          $scope.showWorkflows = false;
          data = {
            wfName: wfName,
            newName: $scope.workflowName
          };
          return $scope.$broadcast("moo.tree.copy", data);
        }
      });
      $scope.$on("moo.conflicts.stopped", function() {
        return updateConflicts();
      });
      retrySave = null;
      $scope.$on("moo.conflicts.retry", function() {
        console.log("retry");
        if (typeof retrySave === "function") {
          retrySave();
        }
        return $("#conflicts-modal").modal("hide");
      });
      $scope.$on("moo.workflow.save.error.409", function(evt, data) {
        console.log("409: %o", arguments);
        $scope.conflicts = data.instances;
        $scope.workflowName = data.name;
        retrySave = data.retry;
        return $("#conflicts-modal").modal("show");
      });
      $scope.$on("moo.builder.show-chooser", function() {
        selectingSubProc = true;
        console.log("show chooser");
        return $("#subproc-chooser-modal").modal("show");
      });
      return $("#subproc-chooser-modal").on("hide.bs.modal", function() {
        return selectingSubProc = false;
      });
    }
  ]);

  angular.module("moo.builder.directives", []).directive("mooConflictingInstances", [
    function() {
      return {
        restrict: "E",
        templateUrl: "partials/builder/conflicts-list.html",
        scope: {
          wflowName: "=",
          conflicts: "="
        }
      };
    }
  ]).directive("mooStopConflicts", [
    "Workflows", function(Workflows) {
      return {
        restrict: "A",
        scope: {
          wflowName: "=mooStopConflicts",
          retry: "=?"
        },
        link: function($scope, element) {
          return element.bind("click", function() {
            return Workflows.deleteInstances($scope.wflowName, function() {
              $scope.$emit("moo.conflicts.stopped", $scope.wflowName);
              return $scope.$emit("moo.conflicts.retry");
            });
          });
        }
      };
    }
  ]);

}).call(this);

//# sourceMappingURL=builder.map
